// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repository/repository.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"
	models "test/internal/models"

	gomock "github.com/golang/mock/gomock"
)

// MockGetData is a mock of GetData interface.
type MockGetData struct {
	ctrl     *gomock.Controller
	recorder *MockGetDataMockRecorder
}

// MockGetDataMockRecorder is the mock recorder for MockGetData.
type MockGetDataMockRecorder struct {
	mock *MockGetData
}

// NewMockGetData creates a new mock instance.
func NewMockGetData(ctrl *gomock.Controller) *MockGetData {
	mock := &MockGetData{ctrl: ctrl}
	mock.recorder = &MockGetDataMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGetData) EXPECT() *MockGetDataMockRecorder {
	return m.recorder
}

// AddLink mocks base method.
func (m *MockGetData) AddLink(data models.Data) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddLink", data)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddLink indicates an expected call of AddLink.
func (mr *MockGetDataMockRecorder) AddLink(data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddLink", reflect.TypeOf((*MockGetData)(nil).AddLink), data)
}

// AddToDB mocks base method.
func (m *MockGetData) AddToDB(data *models.Data) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddToDB", data)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddToDB indicates an expected call of AddToDB.
func (mr *MockGetDataMockRecorder) AddToDB(data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddToDB", reflect.TypeOf((*MockGetData)(nil).AddToDB), data)
}

// DeleteLinkById mocks base method.
func (m *MockGetData) DeleteLinkById(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLinkById", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteLinkById indicates an expected call of DeleteLinkById.
func (mr *MockGetDataMockRecorder) DeleteLinkById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLinkById", reflect.TypeOf((*MockGetData)(nil).DeleteLinkById), id)
}

// GetLinkByID mocks base method.
func (m *MockGetData) GetLinkByID(id int) (*models.Data, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLinkByID", id)
	ret0, _ := ret[0].(*models.Data)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLinkByID indicates an expected call of GetLinkByID.
func (mr *MockGetDataMockRecorder) GetLinkByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLinkByID", reflect.TypeOf((*MockGetData)(nil).GetLinkByID), id)
}

// GetLinks mocks base method.
func (m *MockGetData) GetLinks(page int) (*[]models.Data, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLinks", page)
	ret0, _ := ret[0].(*[]models.Data)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLinks indicates an expected call of GetLinks.
func (mr *MockGetDataMockRecorder) GetLinks(page interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLinks", reflect.TypeOf((*MockGetData)(nil).GetLinks), page)
}

// UpdateLink mocks base method.
func (m *MockGetData) UpdateLink(id int, data models.Data) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLink", id, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateLink indicates an expected call of UpdateLink.
func (mr *MockGetDataMockRecorder) UpdateLink(id, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLink", reflect.TypeOf((*MockGetData)(nil).UpdateLink), id, data)
}

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// Check mocks base method.
func (m *MockClient) Check(link string) (models.Data, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Check", link)
	ret0, _ := ret[0].(models.Data)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Check indicates an expected call of Check.
func (mr *MockClientMockRecorder) Check(link interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Check", reflect.TypeOf((*MockClient)(nil).Check), link)
}

// MockCache is a mock of Cache interface.
type MockCache struct {
	ctrl     *gomock.Controller
	recorder *MockCacheMockRecorder
}

// MockCacheMockRecorder is the mock recorder for MockCache.
type MockCacheMockRecorder struct {
	mock *MockCache
}

// NewMockCache creates a new mock instance.
func NewMockCache(ctrl *gomock.Controller) *MockCache {
	mock := &MockCache{ctrl: ctrl}
	mock.recorder = &MockCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCache) EXPECT() *MockCacheMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockCache) Add(key, value string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", key, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockCacheMockRecorder) Add(key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockCache)(nil).Add), key, value)
}

// Get mocks base method.
func (m *MockCache) Get(key string) (string, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", key)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Get indicates an expected call of Get.
func (mr *MockCacheMockRecorder) Get(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockCache)(nil).Get), key)
}
